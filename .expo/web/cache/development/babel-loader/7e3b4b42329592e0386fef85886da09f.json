{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nexport * from \"./types\";\nvar DEFAULT_OPTIONS = {\n  mediaType: 'photo',\n  videoQuality: 'high',\n  quality: 1,\n  maxWidth: 0,\n  maxHeight: 0,\n  includeBase64: false,\n  cameraType: 'back',\n  selectionLimit: 1,\n  saveToPhotos: false,\n  durationLimit: 0,\n  includeExtra: false\n};\nexport function launchCamera(options, callback) {\n  return new Promise(function (resolve) {\n    NativeModules.ImagePickerManager.launchCamera(_objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options), function (result) {\n      if (callback) callback(result);\n      resolve(result);\n    });\n  });\n}\nexport function launchImageLibrary(options, callback) {\n  return new Promise(function (resolve) {\n    NativeModules.ImagePickerManager.launchImageLibrary(_objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options), function (result) {\n      if (callback) callback(result);\n      resolve(result);\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/Hp User/CS455proj/node_modules/react-native-image-picker/src/index.ts"],"names":["DEFAULT_OPTIONS","mediaType","videoQuality","quality","maxWidth","maxHeight","includeBase64","cameraType","selectionLimit","saveToPhotos","durationLimit","includeExtra","launchCamera","options","callback","Promise","resolve","NativeModules","ImagePickerManager","result","launchImageLibrary"],"mappings":";;;;;;;AAGA;AAEA,IAAMA,eAAoD,GAAG;AAC3DC,EAAAA,SAAS,EAAE,OADgD;AAE3DC,EAAAA,YAAY,EAAE,MAF6C;AAG3DC,EAAAA,OAAO,EAAE,CAHkD;AAI3DC,EAAAA,QAAQ,EAAE,CAJiD;AAK3DC,EAAAA,SAAS,EAAE,CALgD;AAM3DC,EAAAA,aAAa,EAAE,KAN4C;AAO3DC,EAAAA,UAAU,EAAE,MAP+C;AAQ3DC,EAAAA,cAAc,EAAE,CAR2C;AAS3DC,EAAAA,YAAY,EAAE,KAT6C;AAU3DC,EAAAA,aAAa,EAAE,CAV4C;AAW3DC,EAAAA,YAAY,EAAE;AAX6C,CAA7D;AAcA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA8CC,QAA9C,EAAkG;AACvG,SAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5BC,IAAAA,aAAa,CAACC,kBAAd,CAAiCN,YAAjC,iCACMZ,eADN,GAC0Ba,OAD1B,GAEE,UAACM,MAAD,EAAiC;AAC/B,UAAGL,QAAH,EAAaA,QAAQ,CAACK,MAAD,CAAR;AACbH,MAAAA,OAAO,CAACG,MAAD,CAAP;AACD,KALH;AAOD,GARM,CAAP;AASD;AAED,OAAO,SAASC,kBAAT,CACLP,OADK,EAELC,QAFK,EAG0B;AAC/B,SAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5BC,IAAAA,aAAa,CAACC,kBAAd,CAAiCE,kBAAjC,iCACMpB,eADN,GAC0Ba,OAD1B,GAEE,UAACM,MAAD,EAAiC;AAC/B,UAAGL,QAAH,EAAaA,QAAQ,CAACK,MAAD,CAAR;AACbH,MAAAA,OAAO,CAACG,MAAD,CAAP;AACD,KALH;AAOD,GARM,CAAP;AAUD","sourcesContent":["import {NativeModules} from 'react-native';\n\nimport {CameraOptions, ImageLibraryOptions, Callback, ImagePickerResponse} from './types';\nexport * from './types';\n\nconst DEFAULT_OPTIONS: ImageLibraryOptions & CameraOptions = {\n  mediaType: 'photo',\n  videoQuality: 'high',\n  quality: 1,\n  maxWidth: 0,\n  maxHeight: 0,\n  includeBase64: false,\n  cameraType: 'back',\n  selectionLimit: 1,\n  saveToPhotos: false,\n  durationLimit: 0,\n  includeExtra: false,\n};\n\nexport function launchCamera(options: CameraOptions, callback?: Callback) : Promise<ImagePickerResponse> {\n  return new Promise(resolve => {\n    NativeModules.ImagePickerManager.launchCamera(\n      {...DEFAULT_OPTIONS, ...options},\n      (result: ImagePickerResponse) => {\n        if(callback) callback(result);\n        resolve(result);\n      },\n    );\n  });  \n}\n\nexport function launchImageLibrary(\n  options: ImageLibraryOptions,\n  callback?: Callback,\n) : Promise<ImagePickerResponse> {\n  return new Promise(resolve => {\n    NativeModules.ImagePickerManager.launchImageLibrary(\n      {...DEFAULT_OPTIONS, ...options},\n      (result: ImagePickerResponse) => {\n        if(callback) callback(result);\n        resolve(result);\n      },\n    );\n  })\n  \n}\n"]},"metadata":{},"sourceType":"module"}